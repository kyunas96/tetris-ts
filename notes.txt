What is the best way to represent shapes in the board array and keep the 
shapes contiguous?

Shapes falling as a result of cleared lines still preserve their shape and are 
bound

[
  []
  []
  []
  []
  []
  []
  []
  []
  []
  []
]

Shapes on the board are just collections of squares on the board

Shapes are represented as an array/2d-array. The configuration of digits in the
array is what determines the shape of the block element. If the collection of
digits in the array is unique, per shape, then all blocks pertaining to a shape
would be associated by the digit.

When a line is cleared and the board needs to be refreshed, the 

Board Refresh Algorithm:
1. Check if a line has been made
2. If a line has been made then fill the subarray for the row with zeros
3. Recursive algorithm that pulls items down the board array

pullShapes() recursive algorithm:
1. Must go through the board and find all blocks that correspond with the same
   number and transpose them down

Identify the row above the highest blank row.
Go through the row to identify contiguous shapes that by checking for a shared
numberical ID.
Use a recursive algorithm that starts at a square and moves outwards to find the
board indices of the shape.

Stitching algorithm:
A boolean value can be used to represent whether or not the higest row was the
line that was cleared.
  - if it was, then there is no need to pull down shapes on the board refresh
  - if it was not, then the chunk of blocks that exist on the board have been
    bisected by the line that was cleared and needs to be "stitched" together
    - to find the place at which the stitching should start, look for the first
      non zero row, starting from the bottom of the board

Shape Encoding Spec:
- use a 4 digit number as a unique identifier for the blocks of a shape
- the most significant digit will be used to represent the color of the block
  - this most significant digit can be extracted from the 4 digit identifier
    and fed into a switch statement that will set the color

What is the best way to compartmentalize shape ID logic?
- since this will be shared amonst all shapes, have the logic reside in the Shape
  class

Shape classes will not be responsible for their own rendering, instead, the board
will be responsible for all rendering and will only render instances of the Block
class and pass the color information along with it.